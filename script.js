/* 1. Опишите разницу между синхронными и асинхронными функциями.
2. Сравните подходы работы с асинхронным кодом: *сallbacks* vs *promises* vs *async / await*
3. Что такое цикл событий (event loop) в JS ?
4. Какая разница между «стеком вызовов» (call stack) и «очередью задач» (task queue)?
5. Какие версии HTTP-протокола вам известны?
6. Какие знаете коды ответа (состояния) HTTP?
7. Как клиент взаимодействует с сервером?
8. Самостоятельно разберитесь, что такое Cross-Origin Resource Sharing? Как устранить проблемы с CORS?
9. Самостоятельно разберитесь, что такое REST?
10. Как посмотреть заголовки запроса к странице или API?
11. Что можно писать в параметре заголовков `Content-Type` ?
12. Давайте отправим информацию о собачке в API по адресу `localhost/pets/add` 
JSON с информацией о собаке:
{
		"breed": "Beagle",
		"size": "large",
		"color": "orange",
		"age": 6
	} */

/*  ..Ответы:
1. Синхронные функции выполняются поочередно, в то время как асинхронные функции можно выполнять в нужное нам время, например после какого-то события.
2. ??? не могу сравнить, пока все выглядит одинаково, просто как разные методы.
3. Цикл событий - это взаимодействие трех сущностей на уровне движка js: WebApi, Callback Queue, CallStack.
4. В Call Stack перемещаются функции, которые должны быть выполнены, и покидают стэк, когда выполнены. Task queue это очередь задач, в которой задачи, которые должны быть выполненые попадают, и покидают очередь, когда стэк пустой. 
5. те, что есть в интернете HTTP/1.0 (стандарт RFC 1945), HTTP/1.1 (стандарт RFC 2616), HTTP/2 (черновик стандарта), HTTP/3 (черновик стандарта).
6. 404 сервер не найден, 200 ок, 500 ошибка.
7. клиент отправляет запрос, сервер обрабатывает запрос и возвращает ответ.
8. CORS - это техника ослабления правила одного источника, которая позволяет JS обрабатывать ответ от REST API от другого источника. Способ решения проблем - настроить на сервере CORS ответы.
9. это способ создания API с помощью HTTP протокола.
10. Открываем панель разработчика, нажимаем вкладку Network, нажимаем на запросы, и откроется вкладка с заголовками.
11. Accept, Accept-Language, Content-Language, Content-Type.*/
//12.
const dog = {
    "breed": "Beagle",
    "size": "large",
    "color": "orange",
    "age": 6
}

const jsonDog = JSON.stringify(dog);
console.log(jsonDog);

fetch (`localhost/pets/add`, {
    body: jsonDog,
})

